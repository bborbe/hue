// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/hue/pkg/trigger"
)

type Trigger struct {
	TriggerStub        func(context.Context, chan<- struct{}) error
	triggerMutex       sync.RWMutex
	triggerArgsForCall []struct {
		arg1 context.Context
		arg2 chan<- struct{}
	}
	triggerReturns struct {
		result1 error
	}
	triggerReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Trigger) Trigger(arg1 context.Context, arg2 chan<- struct{}) error {
	fake.triggerMutex.Lock()
	ret, specificReturn := fake.triggerReturnsOnCall[len(fake.triggerArgsForCall)]
	fake.triggerArgsForCall = append(fake.triggerArgsForCall, struct {
		arg1 context.Context
		arg2 chan<- struct{}
	}{arg1, arg2})
	stub := fake.TriggerStub
	fakeReturns := fake.triggerReturns
	fake.recordInvocation("Trigger", []interface{}{arg1, arg2})
	fake.triggerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Trigger) TriggerCallCount() int {
	fake.triggerMutex.RLock()
	defer fake.triggerMutex.RUnlock()
	return len(fake.triggerArgsForCall)
}

func (fake *Trigger) TriggerCalls(stub func(context.Context, chan<- struct{}) error) {
	fake.triggerMutex.Lock()
	defer fake.triggerMutex.Unlock()
	fake.TriggerStub = stub
}

func (fake *Trigger) TriggerArgsForCall(i int) (context.Context, chan<- struct{}) {
	fake.triggerMutex.RLock()
	defer fake.triggerMutex.RUnlock()
	argsForCall := fake.triggerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Trigger) TriggerReturns(result1 error) {
	fake.triggerMutex.Lock()
	defer fake.triggerMutex.Unlock()
	fake.TriggerStub = nil
	fake.triggerReturns = struct {
		result1 error
	}{result1}
}

func (fake *Trigger) TriggerReturnsOnCall(i int, result1 error) {
	fake.triggerMutex.Lock()
	defer fake.triggerMutex.Unlock()
	fake.TriggerStub = nil
	if fake.triggerReturnsOnCall == nil {
		fake.triggerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.triggerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Trigger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.triggerMutex.RLock()
	defer fake.triggerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Trigger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ trigger.Trigger = new(Trigger)
